rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function signedIn() {
      return request.auth != null;
    }

    function currentUid() {
      return request.auth.uid;
    }

    function userDocExists() {
      return signedIn() && exists(/databases/$(database)/documents/users/$(currentUid()));
    }

    function userDoc() {
      return get(/databases/$(database)/documents/users/$(currentUid()));
    }

    function hasRole(role) {
      return userDocExists() && userDoc().data.role == role;
    }

    function isMaster() {
      return userDocExists() && (
        userDoc().data.role == "master" ||
        (userDoc().data.props != null && userDoc().data.props.isMaster == true)
      );
    }

    function isTitular() {
      return hasRole("titular") || isMaster();
    }

    function isSelf(userId) {
      return signedIn() && currentUid() == userId;
    }

    function familyExists(familyId) {
      return exists(/databases/$(database)/documents/families/$(familyId));
    }

    function familyData(familyId) {
      return get(/databases/$(database)/documents/families/$(familyId)).data;
    }

    function isFamilyOwner(familyId) {
      return signedIn()
        && familyExists(familyId)
        && familyData(familyId).ownerId == currentUid();
    }

    function isFamilyMember(familyId) {
      return signedIn()
        && familyExists(familyId)
        && familyData(familyId).members[currentUid()] != null
        && (
          !('status' in familyData(familyId).members[currentUid()])
          || familyData(familyId).members[currentUid()].status == "active"
        );
    }

    function listHasCollaborator(listData) {
      return signedIn()
        && listData.collaborators != null
        && listData.collaborators.hasAny([currentUid()]);
    }

    function isListOwner(listData) {
      return signedIn() && listData.ownerId == currentUid();
    }

    function userFamilyCount(userData) {
      return userData.families == null ? 0 : userData.families.size();
    }

    function requestFamilyCount() {
      return request.resource.data.families == null ? 0 : request.resource.data.families.size();
    }

    function familyIdAt(userData, index) {
      return userFamilyCount(userData) > index ? userData.families[index].familyId : null;
    }

    function ownsFamilyReference(userData, index) {
      let familyId = familyIdAt(userData, index);
      return familyId != null && isFamilyOwner(familyId);
    }

    function requestFamilyIdAt(index) {
      return requestFamilyCount() > index ? request.resource.data.families[index].familyId : null;
    }

    function sameFamilyReference(userData, index) {
      let originalFamilyId = familyIdAt(userData, index);
      return originalFamilyId == null || requestFamilyIdAt(index) == originalFamilyId;
    }

    function isInSameFamily(targetUserId) {
      let currentUserData = get(/databases/$(database)/documents/users/$(currentUid())).data;
      let currentUserFamilyId = currentUserData.primaryFamilyId;
      
      return currentUserFamilyId != null
        && exists(/databases/$(database)/documents/families/$(currentUserFamilyId))
        && get(/databases/$(database)/documents/families/$(currentUserFamilyId)).data.members[targetUserId] != null
        && get(/databases/$(database)/documents/families/$(currentUserFamilyId)).data.members[targetUserId].status == "active";
    }

    // Regra global para collectionGroup de invites
    match /{path=**}/invites/{inviteId} {
      // Permite leitura pública apenas de convites pendentes
      allow read: if resource == null || resource.data.status == "pending";
    }

    match /users/{userId} {
      allow create: if signedIn() && isSelf(userId);
      allow read: if signedIn() && (isSelf(userId) || isMaster() || isInSameFamily(userId));
      allow update: if isMaster() 
        || (signedIn() && isSelf(userId)
          && (!('role' in request.resource.data) || request.resource.data.role == resource.data.role)
          && (!('status' in request.resource.data) || request.resource.data.status == resource.data.status));
      allow delete: if false;
    }

    match /families/{familyId} {
      allow create: if signedIn()
        && request.resource.data.ownerId == currentUid()
        && isTitular();
      allow read: if isMaster() || isFamilyOwner(familyId) || isFamilyMember(familyId);
      allow update: if isMaster() 
        || (isFamilyOwner(familyId) && request.resource.data.ownerId == currentUid())
        || ( // Permite adicionar-se como membro via convite
          signedIn()
          && request.resource.data.members.keys().hasAny([currentUid()])
          && !resource.data.members.keys().hasAny([currentUid()])
          && request.resource.data.members[currentUid()].role == "viewer"
        );
      allow delete: if isMaster() || isFamilyOwner(familyId);

      match /lists/{listId} {
        allow create: if isMaster()
          || (
            isTitular()
            && request.resource.data.ownerId == currentUid()
            && isFamilyOwner(familyId)
          );
        allow read: if isMaster() || isFamilyMember(familyId);
        allow update: if isMaster()
          || (
            isFamilyMember(familyId)
            && isListOwner(resource.data)
            && request.resource.data.ownerId == resource.data.ownerId
            && request.resource.data.familyId == resource.data.familyId
          );
        allow delete: if isMaster()
          || (
            isFamilyMember(familyId)
            && isListOwner(resource.data)
          );

        match /items/{itemId} {
          allow read: if isMaster()
            || isFamilyOwner(familyId)
            || isFamilyMember(familyId)
            || listHasCollaborator(get(/databases/$(database)/documents/families/$(familyId)/lists/$(listId)).data);
          allow create, update, delete: if isMaster() 
            || isFamilyOwner(familyId)
            || isFamilyMember(familyId);
        }
      }

      match /invites/{inviteId} {
        // Ler: Qualquer pessoa pode ler convites pendentes (para aceitar via link público)
        // Owner e Master podem ler todos os convites da família
        allow read: if resource.data.status == "pending" // Link público
          || (signedIn() && (isMaster() || isFamilyOwner(familyId)));
        
        // Criar: Apenas owner da família
        allow create: if signedIn() && (
          isMaster() 
          || (
            isFamilyOwner(familyId)
            && request.resource.data.createdBy == currentUid()
            && request.resource.data.familyId == familyId
            && request.resource.data.status == "pending"
            && request.resource.data.usedCount == 0
            && request.resource.data.acceptedBy.size() == 0
          )
        );
        
        // Atualizar: Owner (revogar) OU qualquer usuário autenticado (aceitar)
        allow update: if signedIn() && (
          isMaster()
          || isFamilyOwner(familyId) // Owner pode revogar
          || ( // Usuário pode aceitar convite
            resource.data.status == "pending"
            && request.resource.data.usedCount == resource.data.usedCount + 1
            && request.resource.data.acceptedBy.size() == resource.data.acceptedBy.size() + 1
            && request.resource.data.acceptedBy.hasAll(resource.data.acceptedBy)
            && request.resource.data.acceptedBy[request.resource.data.acceptedBy.size() - 1] == currentUid()
          )
        );
        
        // Deletar: Apenas owner e master
        allow delete: if isMaster() || isFamilyOwner(familyId);
      }
    }

    // Plans - apenas Master pode editar, todos autenticados podem ler
    match /plans/{planId} {
      allow read: if signedIn();
      allow create, update, delete: if isMaster();
    }

    // Configurações globais - apenas Master
    match /settings/{settingId} {
      allow read: if signedIn();
      allow create, update, delete: if isMaster();
    }

    // Logs de auditoria - apenas Master pode ver
    match /audit_logs/{logId} {
      allow read: if isMaster();
      allow create: if signedIn();
      allow update, delete: if false;
    }
  }
}
